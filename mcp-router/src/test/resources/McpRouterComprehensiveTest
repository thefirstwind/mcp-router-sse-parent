package com.nacos.mcp.router.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.nacos.mcp.router.model.*;
import com.nacos.mcp.router.service.*;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.*;
import org.springframework.test.context.ActiveProfiles;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.time.Duration;
import java.util.*;

/**
 * 综合测试 - 验证MCP Router所有功能
 * 1. MCP客户端协议实现
 * 2. Resources访问验证
 * 3. Tools联通性验证
 * 4. MCP和Nacos双重配置验证
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class McpRouterComprehensiveTest {

    @LocalServerPort
    private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private McpServerService mcpServerService;

    @Autowired
    private McpResourceService mcpResourceService;

    @Autowired
    private McpPromptService mcpPromptService;

    @Autowired
    private McpToolService mcpToolService;

    @Autowired
    private ObjectMapper objectMapper;

    private String baseUrl;

    @BeforeEach
    void setUp() {
        baseUrl = "http://localhost:" + port;
        log.info("Test setup completed. Base URL: {}", baseUrl);
    }

    // ==================== 1. MCP客户端协议实现验证 ====================

    @Test
    @Order(1)
    @DisplayName("1.1 MCP协议初始化验证")
    void testMcpInitialization() {
        log.info("=== 测试MCP协议初始化 ===");

        // 构建初始化请求
        McpJsonRpcRequest initRequest = new McpJsonRpcRequest();
        initRequest.setJsonrpc("2.0");
        initRequest.setMethod("initialize");
        initRequest.setId("init-1");
        
        Map<String, Object> params = new HashMap<>();
        params.put("protocolVersion", "2024-11-05");
        params.put("capabilities", Map.of(
            "tools", Map.of(),
            "resources", Map.of(),
            "prompts", Map.of()
        ));
        params.put("clientInfo", Map.of(
            "name", "test-client",
            "version", "1.0.0"
        ));
        initRequest.setParams(params);

        // 发送初始化请求
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(initRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        Assertions.assertThat(response.getBody().getId()).isEqualTo("init-1");
        Assertions.assertThat(response.getBody().getResult()).isNotNull();

        Map<String, Object> result = (Map<String, Object>) response.getBody().getResult();
        Assertions.assertThat(result.get("protocolVersion")).isEqualTo("2024-11-05");
        Assertions.assertThat(result.get("capabilities")).isNotNull();
        Assertions.assertThat(result.get("serverInfo")).isNotNull();

        log.info("✅ MCP协议初始化验证通过");
    }

    @Test
    @Order(2)
    @DisplayName("1.2 MCP协议错误处理验证")
    void testMcpErrorHandling() {
        log.info("=== 测试MCP协议错误处理 ===");

        // 发送无效方法请求
        McpJsonRpcRequest invalidRequest = new McpJsonRpcRequest();
        invalidRequest.setJsonrpc("2.0");
        invalidRequest.setMethod("invalid_method");
        invalidRequest.setId("error-1");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(invalidRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证错误响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        Assertions.assertThat(response.getBody().getError()).isNotNull();
        Assertions.assertThat(response.getBody().getError().getCode())
            .isEqualTo(McpJsonRpcResponse.ErrorCodes.METHOD_NOT_FOUND);

        log.info("✅ MCP协议错误处理验证通过");
    }

    // ==================== 2. Tools联通性验证 ====================

    @Test
    @Order(3)
    @DisplayName("2.1 Tools列表获取验证")
    void testToolsList() {
        log.info("=== 测试Tools列表获取 ===");

        // 构建tools/list请求
        McpJsonRpcRequest toolsRequest = new McpJsonRpcRequest();
        toolsRequest.setJsonrpc("2.0");
        toolsRequest.setMethod("tools/list");
        toolsRequest.setId("tools-1");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(toolsRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        Assertions.assertThat(response.getBody().getResult()).isNotNull();

        Map<String, Object> result = (Map<String, Object>) response.getBody().getResult();
        List<Map<String, Object>> tools = (List<Map<String, Object>>) result.get("tools");
        Assertions.assertThat(tools).isNotNull();
        Assertions.assertThat(tools.size()).isGreaterThan(0);

        log.info("✅ 发现 {} 个可用工具", tools.size());
        tools.forEach(tool -> log.info("  - {}: {}", tool.get("name"), tool.get("description")));
    }

    @Test
    @Order(4)
    @DisplayName("2.2 Echo工具调用验证")
    void testEchoToolCall() {
        log.info("=== 测试Echo工具调用 ===");

        // 构建tools/call请求
        McpJsonRpcRequest toolCallRequest = new McpJsonRpcRequest();
        toolCallRequest.setJsonrpc("2.0");
        toolCallRequest.setMethod("tools/call");
        toolCallRequest.setId("tool-call-1");

        Map<String, Object> params = new HashMap<>();
        params.put("name", "echo");
        params.put("arguments", Map.of("message", "Hello MCP Router!"));
        toolCallRequest.setParams(params);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(toolCallRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        Assertions.assertThat(response.getBody().getResult()).isNotNull();

        Map<String, Object> result = (Map<String, Object>) response.getBody().getResult();
        Assertions.assertThat(result.get("content")).isNotNull();
        Assertions.assertThat(result.get("isError")).isEqualTo(false);

        log.info("✅ Echo工具调用验证通过");
    }

    @Test
    @Order(5)
    @DisplayName("2.3 Calculator工具调用验证")
    void testCalculatorToolCall() {
        log.info("=== 测试Calculator工具调用 ===");

        // 测试加法运算
        McpJsonRpcRequest calcRequest = new McpJsonRpcRequest();
        calcRequest.setJsonrpc("2.0");
        calcRequest.setMethod("tools/call");
        calcRequest.setId("calc-1");

        Map<String, Object> params = new HashMap<>();
        params.put("name", "calculator");
        params.put("arguments", Map.of(
            "a", 10.0,
            "b", 5.0,
            "operation", "add"
        ));
        calcRequest.setParams(params);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(calcRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        Assertions.assertThat(response.getBody().getResult()).isNotNull();

        log.info("✅ Calculator工具调用验证通过");
    }

    @Test
    @Order(6)
    @DisplayName("2.4 类型安全工具验证")
    void testTypeSafeTools() {
        log.info("=== 测试类型安全工具 ===");

        // 测试类型安全的Echo工具
        McpToolService.EchoRequest echoRequest = new McpToolService.EchoRequest("Test Message", 2);
        McpToolService.EchoResponse echoResponse = mcpToolService.echo(echoRequest);

        Assertions.assertThat(echoResponse).isNotNull();
        Assertions.assertThat(echoResponse.getOriginalMessage()).isEqualTo("Test Message");
        Assertions.assertThat(echoResponse.getRepeatCount()).isEqualTo(2);
        Assertions.assertThat(echoResponse.getEchoedMessage()).contains("Test Message");

        // 测试类型安全的Calculator工具
        McpToolService.CalculatorRequest calcRequest = new McpToolService.CalculatorRequest(15.0, 3.0, "multiply");
        McpToolService.CalculatorResponse calcResponse = mcpToolService.calculator(calcRequest);

        Assertions.assertThat(calcResponse).isNotNull();
        Assertions.assertThat(calcResponse.getResult()).isEqualTo(45.0);
        Assertions.assertThat(calcResponse.getOperation()).isEqualTo("multiply");

        log.info("✅ 类型安全工具验证通过");
    }

    // ==================== 3. Resources访问验证 ====================

    @Test
    @Order(7)
    @DisplayName("3.1 Resources列表获取验证")
    void testResourcesList() {
        log.info("=== 测试Resources列表获取 ===");

        // 构建resources/list请求
        McpJsonRpcRequest resourcesRequest = new McpJsonRpcRequest();
        resourcesRequest.setJsonrpc("2.0");
        resourcesRequest.setMethod("resources/list");
        resourcesRequest.setId("resources-1");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(resourcesRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        Assertions.assertThat(response.getBody().getResult()).isNotNull();

        Map<String, Object> result = (Map<String, Object>) response.getBody().getResult();
        List<Map<String, Object>> resources = (List<Map<String, Object>>) result.get("resources");
        Assertions.assertThat(resources).isNotNull();

        log.info("✅ Resources列表获取验证通过，发现 {} 个资源", resources.size());
    }

    @Test
    @Order(8)
    @DisplayName("3.2 Resource读取验证")
    void testResourceRead() {
        log.info("=== 测试Resource读取 ===");

        // 测试读取一个资源
        String testUri = "file://test/config.json";
        
        StepVerifier.create(mcpResourceService.readResource("mcp-file-server", testUri))
            .expectNextMatches(resource -> {
                Assertions.assertThat(resource).isNotNull();
                Assertions.assertThat(resource.getUri()).isEqualTo(testUri);
                return true;
            })
            .expectComplete()
            .verify(Duration.ofSeconds(5));

        log.info("✅ Resource读取验证通过");
    }

    // ==================== 4. Prompts功能验证 ====================

    @Test
    @Order(9)
    @DisplayName("4.1 Prompts列表获取验证")
    void testPromptsList() {
        log.info("=== 测试Prompts列表获取 ===");

        // 构建prompts/list请求
        McpJsonRpcRequest promptsRequest = new McpJsonRpcRequest();
        promptsRequest.setJsonrpc("2.0");
        promptsRequest.setMethod("prompts/list");
        promptsRequest.setId("prompts-1");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(promptsRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        Assertions.assertThat(response.getBody().getResult()).isNotNull();

        Map<String, Object> result = (Map<String, Object>) response.getBody().getResult();
        List<Map<String, Object>> prompts = (List<Map<String, Object>>) result.get("prompts");
        Assertions.assertThat(prompts).isNotNull();

        log.info("✅ Prompts列表获取验证通过，发现 {} 个提示", prompts.size());
    }

    // ==================== 5. MCP服务器管理验证 ====================

    @Test
    @Order(10)
    @DisplayName("5.1 MCP服务器列表验证")
    void testMcpServersList() {
        log.info("=== 测试MCP服务器列表 ===");

        StepVerifier.create(mcpServerService.listAllMcpServers())
            .expectNextMatches(servers -> {
                Assertions.assertThat(servers).isNotNull();
                Assertions.assertThat(servers.size()).isGreaterThan(0);
                
                log.info("发现 {} 个MCP服务器：", servers.size());
                servers.forEach(server -> {
                    log.info("  - {}: {} (状态: {})", 
                        server.getName(), 
                        server.getDescription(), 
                        server.getStatus());
                });
                
                return true;
            })
            .expectComplete()
            .verify(Duration.ofSeconds(5));

        log.info("✅ MCP服务器列表验证通过");
    }

    @Test
    @Order(11)
    @DisplayName("5.2 MCP服务器注册验证")
    void testMcpServerRegistration() {
        log.info("=== 测试MCP服务器注册 ===");

        // 创建测试服务器注册请求
        McpServerRegistrationRequest registrationRequest = McpServerRegistrationRequest.builder()
            .serverName("test-mcp-server")
            .version("1.0.0")
            .description("Test MCP Server for integration testing")
            .transportType("sse")
            .endpoint("http://localhost:9999/mcp/sse")
            .build();

        StepVerifier.create(mcpServerService.registerMcpServer(registrationRequest))
            .expectNextMatches(server -> {
                Assertions.assertThat(server).isNotNull();
                Assertions.assertThat(server.getName()).isEqualTo("test-mcp-server");
                Assertions.assertThat(server.getStatus()).isEqualTo(McpServer.ServerStatus.REGISTERED);
                return true;
            })
            .expectComplete()
            .verify(Duration.ofSeconds(5));

        log.info("✅ MCP服务器注册验证通过");
    }

    // ==================== 6. 性能和稳定性验证 ====================

    @Test
    @Order(12)
    @DisplayName("6.1 并发请求处理验证")
    void testConcurrentRequests() {
        log.info("=== 测试并发请求处理 ===");

        int concurrentRequests = 10;
        List<Mono<String>> requests = new ArrayList<>();

        for (int i = 0; i < concurrentRequests; i++) {
            final int requestId = i;
            Mono<String> request = Mono.fromCallable(() -> {
                String result = mcpToolService.echo("Concurrent request " + requestId);
                return result;
            });
            requests.add(request);
        }

        StepVerifier.create(Mono.zip(requests, results -> {
                log.info("处理了 {} 个并发请求", results.length);
                return results.length;
            }))
            .expectNextMatches(count -> count == concurrentRequests)
            .expectComplete()
            .verify(Duration.ofSeconds(10));

        log.info("✅ 并发请求处理验证通过");
    }

    // ==================== 7. 配置验证 ====================

    @Test
    @Order(13)
    @DisplayName("7.1 MCP配置验证")
    void testMcpConfiguration() {
        log.info("=== 测试MCP配置 ===");

        // 验证REST API端点
        ResponseEntity<String> healthResponse = restTemplate.getForEntity(
            baseUrl + "/actuator/health", String.class);
        Assertions.assertThat(healthResponse.getStatusCode()).isEqualTo(HttpStatus.OK);

        // 验证MCP路由端点
        ResponseEntity<String> mcpResponse = restTemplate.getForEntity(
            baseUrl + "/mcp/servers", String.class);
        Assertions.assertThat(mcpResponse.getStatusCode()).isEqualTo(HttpStatus.OK);

        log.info("✅ MCP配置验证通过");
    }

    @Test
    @Order(14)
    @DisplayName("7.2 Nacos配置验证")
    void testNacosConfiguration() {
        log.info("=== 测试Nacos配置验证 ===");

        // 验证Nacos服务发现功能
        StepVerifier.create(mcpServerService.listAllMcpServers())
            .expectNextMatches(servers -> {
                // 验证有mock服务器存在（表明Nacos集成正常）
                boolean hasMockServers = servers.stream()
                    .anyMatch(server -> server.getName().contains("mcp-"));
                
                Assertions.assertThat(hasMockServers).isTrue();
                log.info("Nacos服务发现正常，发现Mock服务器");
                return true;
            })
            .expectComplete()
            .verify(Duration.ofSeconds(5));

        log.info("✅ Nacos配置验证通过");
    }

    // ==================== 8. 错误处理和恢复验证 ====================

    @Test
    @Order(15)
    @DisplayName("8.1 错误处理验证")
    void testErrorHandling() {
        log.info("=== 测试错误处理验证 ===");

        // 测试除零错误
        McpJsonRpcRequest errorRequest = new McpJsonRpcRequest();
        errorRequest.setJsonrpc("2.0");
        errorRequest.setMethod("tools/call");
        errorRequest.setId("error-test-1");

        Map<String, Object> params = new HashMap<>();
        params.put("name", "calculator");
        params.put("arguments", Map.of(
            "a", 10.0,
            "b", 0.0,
            "operation", "divide"
        ));
        errorRequest.setParams(params);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<McpJsonRpcRequest> entity = new HttpEntity<>(errorRequest, headers);

        ResponseEntity<McpJsonRpcResponse> response = restTemplate.postForEntity(
            baseUrl + "/mcp/jsonrpc", entity, McpJsonRpcResponse.class);

        // 验证错误响应
        Assertions.assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        Assertions.assertThat(response.getBody()).isNotNull();
        // 错误应该被包装在结果中而不是直接返回错误响应
        
        log.info("✅ 错误处理验证通过");
    }

    @AfterAll
    static void cleanup() {
        log.info("=== 所有测试完成 ===");
        log.info("✅ MCP Router综合测试全部通过！");
    }
}